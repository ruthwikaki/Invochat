
-- ### Extensions ###
-- Enable the 'uuid-ossp' extension for UUID generation functions.
create extension if not exists "uuid-ossp" with schema extensions;
-- Enable the 'pg_tgrm' extension for trigram-based text similarity searches.
create extension if not exists "pg_tgrm" with schema extensions;


-- ### Types ###
-- Define custom types to be used in tables and functions.
-- Role for users within a company.
create type public.company_role as enum ('Owner', 'Admin', 'Member');
-- Status of a purchase order.
create type public.purchase_order_status as enum ('draft', 'sent', 'partial', 'received', 'cancelled', 'pending_approval');
-- Type of change recorded in the inventory ledger.
create type public.inventory_change_type as enum ('purchase_order_received', 'sale', 'return', 'adjustment', 'restock');
-- Status for background import/export jobs.
create type public.job_status as enum ('pending', 'processing', 'completed', 'failed', 'completed_with_errors');
-- Type for alerts generated by the system.
create type public.alert_type as enum ('low_stock', 'dead_stock', 'predictive');
-- Status for integration synchronization jobs.
create type public.sync_status as enum ('syncing_products', 'syncing_sales', 'syncing', 'success', 'failed', 'idle');

-- ### Tables ###

-- Table: companies
-- Stores basic information about each company using the application.
create table public.companies (
    id uuid default extensions.uuid_generate_v4() not null,
    name text not null,
    created_at timestamp with time zone default now() not null,
    constraint companies_pkey primary key (id)
);

-- Table: users
-- Extends the built-in Supabase `auth.users` table with company-specific information.
create table public.users (
    id uuid not null,
    company_id uuid not null,
    role public.company_role not null,
    deleted_at timestamp with time zone,
    constraint users_pkey primary key (id),
    constraint users_id_fkey foreign key (id) references auth.users (id) on delete cascade,
    constraint users_company_id_fkey foreign key (company_id) references public.companies (id) on delete restrict
);

-- Table: company_settings
-- Stores configurable business logic thresholds for each company.
create table public.company_settings (
    company_id uuid not null,
    dead_stock_days integer not null default 90,
    fast_moving_days integer not null default 30,
    predictive_stock_days integer not null default 7,
    overstock_multiplier numeric(5,2) not null default 3.00,
    high_value_threshold integer not null default 100000,
    currency text,
    timezone text,
    created_at timestamp with time zone default now() not null,
    updated_at timestamp with time zone,
    constraint company_settings_pkey primary key (company_id),
    constraint company_settings_company_id_fkey foreign key (company_id) references public.companies (id) on delete cascade
);

-- Table: suppliers
-- Stores supplier/vendor information.
create table public.suppliers (
    id uuid default extensions.uuid_generate_v4() not null,
    company_id uuid not null,
    name text not null,
    email text,
    phone text,
    notes text,
    default_lead_time_days integer,
    created_at timestamp with time zone default now() not null,
    updated_at timestamp with time zone,
    constraint suppliers_pkey primary key (id),
    constraint suppliers_company_id_fkey foreign key (company_id) references public.companies (id) on delete cascade
);

-- Table: inventory
-- Core table for product and inventory data.
create table public.inventory (
    id uuid default extensions.uuid_generate_v4() not null,
    company_id uuid not null,
    sku text not null,
    name text not null,
    category text,
    cost integer not null default 0,
    price integer,
    quantity integer not null default 0,
    reorder_point integer,
    reorder_quantity integer,
    last_sold_date timestamp with time zone,
    supplier_id uuid,
    barcode text,
    source_platform text,
    external_product_id text,
    external_variant_id text,
    external_quantity integer,
    deleted_at timestamp with time zone,
    deleted_by uuid,
    created_at timestamp with time zone default now() not null,
    updated_at timestamp with time zone,
    constraint inventory_pkey primary key (id),
    constraint inventory_company_id_fkey foreign key (company_id) references public.companies (id) on delete cascade,
    constraint inventory_deleted_by_fkey foreign key (deleted_by) references public.users (id),
    constraint inventory_supplier_id_fkey foreign key (supplier_id) references public.suppliers (id) on delete set null,
    constraint inventory_company_id_sku_key unique (company_id, sku),
    constraint inventory_company_id_source_platform_external_product_id_key unique (company_id, source_platform, external_product_id),
    constraint inventory_company_id_source_platform_external_variant_id_key unique (company_id, source_platform, external_variant_id)
);

-- Table: conversations
-- Stores AI chat conversation metadata.
create table public.conversations (
    id uuid default extensions.uuid_generate_v4() not null,
    user_id uuid not null,
    company_id uuid not null,
    title text,
    created_at timestamp with time zone default now() not null,
    last_accessed_at timestamp with time zone default now() not null,
    is_starred boolean default false not null,
    constraint conversations_pkey primary key (id),
    constraint conversations_company_id_fkey foreign key (company_id) references public.companies (id) on delete cascade,
    constraint conversations_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade
);

-- Table: messages
-- Stores individual messages within an AI chat conversation.
create table public.messages (
    id uuid default extensions.uuid_generate_v4() not null,
    conversation_id uuid not null,
    company_id uuid not null,
    role text not null,
    content text,
    visualization jsonb,
    confidence numeric(3,2),
    assumptions text[],
    component text,
    component_props jsonb,
    created_at timestamp with time zone default now() not null,
    constraint messages_pkey primary key (id),
    constraint messages_company_id_fkey foreign key (company_id) references public.companies (id) on delete cascade,
    constraint messages_conversation_id_fkey foreign key (conversation_id) references public.conversations (id) on delete cascade
);

-- Table: customers
-- Stores customer information.
create table public.customers (
    id uuid default extensions.uuid_generate_v4() not null,
    company_id uuid not null,
    customer_name text not null,
    email text,
    deleted_at timestamp with time zone,
    created_at timestamp with time zone default now() not null,
    constraint customers_pkey primary key (id),
    constraint customers_company_id_fkey foreign key (company_id) references public.companies (id) on delete cascade,
    constraint customers_company_id_email_key unique (company_id, email)
);

-- Table: sales
-- Stores sales order headers.
create table public.sales (
    id uuid default extensions.uuid_generate_v4() not null,
    company_id uuid not null,
    customer_id uuid,
    customer_name text,
    customer_email text,
    sale_number text,
    total_amount integer,
    payment_method text,
    notes text,
    external_id text,
    created_by uuid,
    created_at timestamp with time zone default now() not null,
    constraint sales_pkey primary key (id),
    constraint sales_company_id_fkey foreign key (company_id) references public.companies (id) on delete cascade,
    constraint sales_created_by_fkey foreign key (created_by) references auth.users (id) on delete set null,
    constraint sales_customer_id_fkey foreign key (customer_id) references public.customers (id),
    constraint sales_company_id_external_id_key unique (company_id, external_id)
);

-- Table: sale_items
-- Stores line items for each sales order.
create table public.sale_items (
    id uuid default extensions.uuid_generate_v4() not null,
    sale_id uuid not null,
    company_id uuid not null,
    product_id uuid not null,
    quantity integer not null,
    unit_price integer not null,
    cost_at_time integer,
    constraint sale_items_pkey primary key (id),
    constraint sale_items_company_id_fkey foreign key (company_id) references public.companies (id) on delete cascade,
    constraint sale_items_product_id_fkey foreign key (product_id) references public.inventory (id) on delete restrict,
    constraint sale_items_sale_id_fkey foreign key (sale_id) references public.sales (id) on delete cascade
);

-- Table: purchase_orders
-- Stores purchase order headers.
create table public.purchase_orders (
    id uuid default extensions.uuid_generate_v4() not null,
    company_id uuid not null,
    supplier_id uuid not null,
    po_number text not null,
    status public.purchase_order_status not null,
    order_date date not null,
    expected_date date,
    total_amount integer,
    notes text,
    created_by uuid,
    created_at timestamp with time zone default now() not null,
    updated_at timestamp with time zone,
    constraint purchase_orders_pkey primary key (id),
    constraint purchase_orders_company_id_fkey foreign key (company_id) references public.companies (id) on delete cascade,
    constraint purchase_orders_created_by_fkey foreign key (created_by) references auth.users (id) on delete set null,
    constraint purchase_orders_supplier_id_fkey foreign key (supplier_id) references public.suppliers (id),
    constraint purchase_orders_company_id_po_number_key unique (company_id, po_number)
);

-- Table: purchase_order_items
-- Stores line items for each purchase order.
create table public.purchase_order_items (
    id uuid default extensions.uuid_generate_v4() not null,
    po_id uuid not null,
    company_id uuid not null,
    product_id uuid not null,
    quantity integer not null,
    received_quantity integer default 0 not null,
    unit_cost integer not null,
    constraint purchase_order_items_pkey primary key (id),
    constraint purchase_order_items_company_id_fkey foreign key (company_id) references public.companies (id) on delete cascade,
    constraint purchase_order_items_po_id_fkey foreign key (po_id) references public.purchase_orders (id) on delete cascade,
    constraint purchase_order_items_product_id_fkey foreign key (product_id) references public.inventory (id) on delete cascade
);

-- Table: inventory_ledger
-- Records every change to inventory quantity for a complete audit trail.
create table public.inventory_ledger (
    id uuid default extensions.uuid_generate_v4() not null,
    company_id uuid not null,
    product_id uuid not null,
    change_type public.inventory_change_type not null,
    quantity_change integer not null,
    new_quantity integer not null,
    related_id uuid,
    notes text,
    created_at timestamp with time zone default now() not null,
    constraint inventory_ledger_pkey primary key (id),
    constraint inventory_ledger_company_id_fkey foreign key (company_id) references public.companies (id) on delete cascade,
    constraint inventory_ledger_product_id_fkey foreign key (product_id) references public.inventory (id) on delete cascade
);

-- Table: integrations
-- Stores integration connection details.
create table public.integrations (
    id uuid default extensions.uuid_generate_v4() not null,
    company_id uuid not null,
    platform text not null,
    shop_domain text,
    shop_name text,
    is_active boolean default true not null,
    last_sync_at timestamp with time zone,
    sync_status public.sync_status,
    created_at timestamp with time zone default now() not null,
    updated_at timestamp with time zone,
    constraint integrations_pkey primary key (id),
    constraint integrations_company_id_fkey foreign key (company_id) references public.companies (id) on delete cascade,
    constraint integrations_company_id_platform_key unique (company_id, platform)
);

-- Table: sync_state
-- Tracks the state of long-running synchronization jobs to allow for retries.
create table public.sync_state (
    integration_id uuid not null,
    sync_type text not null,
    last_processed_cursor text,
    last_update timestamp with time zone not null,
    constraint sync_state_pkey primary key (integration_id, sync_type),
    constraint sync_state_integration_id_fkey foreign key (integration_id) references public.integrations (id) on delete cascade
);

-- Table: audit_log
-- Records significant user and system actions for security and debugging.
create table public.audit_log (
    id bigint generated by default as identity not null,
    company_id uuid not null,
    user_id uuid,
    action text not null,
    details jsonb,
    created_at timestamp with time zone default now() not null,
    constraint audit_log_pkey primary key (id),
    constraint audit_log_company_id_fkey foreign key (company_id) references public.companies (id) on delete cascade,
    constraint audit_log_user_id_fkey foreign key (user_id) references auth.users (id) on delete set null
);

-- Table: channel_fees
-- Stores transaction fee structures for different sales channels.
create table public.channel_fees (
    id uuid default extensions.uuid_generate_v4() not null,
    company_id uuid not null,
    channel_name text not null,
    percentage_fee numeric(5,4) not null,
    fixed_fee integer not null,
    constraint channel_fees_pkey primary key (id),
    constraint channel_fees_company_id_fkey foreign key (company_id) references public.companies (id) on delete cascade,
    constraint channel_fees_company_id_channel_name_key unique (company_id, channel_name)
);

-- Table: export_jobs
-- Records data export requests.
create table public.export_jobs (
    id uuid default extensions.uuid_generate_v4() not null,
    company_id uuid not null,
    requested_by_user_id uuid not null,
    status public.job_status default 'pending'::public.job_status not null,
    file_path text,
    error_message text,
    created_at timestamp with time zone default now() not null,
    completed_at timestamp with time zone,
    constraint export_jobs_pkey primary key (id),
    constraint export_jobs_company_id_fkey foreign key (company_id) references public.companies (id) on delete cascade,
    constraint export_jobs_requested_by_user_id_fkey foreign key (requested_by_user_id) references auth.users (id) on delete cascade
);

-- Table: sync_logs
-- Records logs for each sync attempt.
create table public.sync_logs (
    id uuid default extensions.uuid_generate_v4() not null,
    integration_id uuid not null,
    sync_type text not null,
    status text not null,
    records_synced integer,
    error_message text,
    started_at timestamp with time zone default now() not null,
    completed_at timestamp with time zone,
    constraint sync_logs_pkey primary key (id),
    constraint sync_logs_integration_id_fkey foreign key (integration_id) references public.integrations (id) on delete cascade
);

-- ### Triggers and Functions ###

-- Function: handle_new_user
-- Automatically creates a new company and associates it with the new user.
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer
as $$
declare
  new_company_id uuid;
begin
  -- Create a new company
  insert into public.companies (name)
  values (new.raw_user_meta_data->>'company_name')
  returning id into new_company_id;

  -- Insert the user into our public.users table
  insert into public.users (id, company_id, role)
  values (new.id, new_company_id, 'Owner');
  
  -- Update the user's app_metadata in auth.users
  update auth.users
  set app_metadata = jsonb_set(
    coalesce(app_metadata, '{}'::jsonb),
    '{company_id}',
    to_jsonb(new_company_id)
  ) || jsonb_set(
    coalesce(app_metadata, '{}'::jsonb),
    '{role}',
    to_jsonb('Owner'::text)
  )
  where id = new.id;
  
  return new;
end;
$$;

-- Trigger: on_auth_user_created
-- Fires the handle_new_user function whenever a new user is created in auth.users.
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Function to get Purchase Order details
create or replace function public.get_purchase_order_details(p_company_id uuid, p_po_id uuid)
returns jsonb
language plpgsql
as $$
declare
    po_details jsonb;
begin
    select
        jsonb_build_object(
            'id', po.id,
            'po_number', po.po_number,
            'company_id', po.company_id,
            'supplier_id', po.supplier_id,
            'supplier_name', s.name,
            'status', po.status,
            'order_date', po.order_date,
            'expected_date', po.expected_date,
            'total_amount', po.total_amount,
            'notes', po.notes,
            'created_at', po.created_at,
            'items', (
                select coalesce(jsonb_agg(
                    jsonb_build_object(
                        'id', poi.id,
                        'product_id', poi.product_id,
                        'sku', i.sku,
                        'product_name', i.name,
                        'quantity', poi.quantity,
                        'unit_cost', poi.unit_cost,
                        'total_cost', (poi.quantity * poi.unit_cost)
                    )
                ), '[]'::jsonb)
                from public.purchase_order_items poi
                join public.inventory i on poi.product_id = i.id
                where poi.po_id = po.id
            )
        )
    into po_details
    from public.purchase_orders po
    join public.suppliers s on po.supplier_id = s.id
    where po.id = p_po_id and po.company_id = p_company_id;

    return po_details;
end;
$$;

-- ### Row Level Security (RLS) ###

-- Enable RLS for all tables
alter table public.companies enable row level security;
alter table public.users enable row level security;
alter table public.company_settings enable row level security;
alter table public.suppliers enable row level security;
alter table public.inventory enable row level security;
alter table public.conversations enable row level security;
alter table public.messages enable row level security;
alter table public.customers enable row level security;
alter table public.sales enable row level security;
alter table public.sale_items enable row level security;
alter table public.purchase_orders enable row level security;
alter table public.purchase_order_items enable row level security;
alter table public.inventory_ledger enable row level security;
alter table public.integrations enable row level security;
alter table public.sync_state enable row level security;
alter table public.audit_log enable row level security;
alter table public.channel_fees enable row level security;
alter table public.export_jobs enable row level security;
alter table public.sync_logs enable row level security;


-- Helper function to get the company ID from the current user's claims
create or replace function public.get_my_company_id()
returns uuid
language sql
stable
as $$
  select nullif(current_setting('request.jwt.claims', true)::jsonb ->> 'company_id', '')::uuid;
$$;


-- RLS Policies
-- Users can only see their own company's data.
create policy "Users can only see their own company's data" on public.companies
  for select using (id = public.get_my_company_id());

create policy "Users can see other users in their own company" on public.users
  for select using (company_id = public.get_my_company_id());

create policy "Users can CRUD their own company's settings" on public.company_settings
  for all using (company_id = public.get_my_company_id());

create policy "Users can CRUD their own company's suppliers" on public.suppliers
  for all using (company_id = public.get_my_company_id());

create policy "Users can CRUD their own company's inventory" on public.inventory
  for all using (company_id = public.get_my_company_id());

create policy "Users can CRUD their own conversations" on public.conversations
  for all using (user_id = auth.uid());

create policy "Users can CRUD messages in their own conversations" on public.messages
  for all using (conversation_id in (select id from public.conversations where user_id = auth.uid()));

create policy "Users can CRUD their own company's customers" on public.customers
  for all using (company_id = public.get_my_company_id());
  
create policy "Users can CRUD their own company's sales" on public.sales
  for all using (company_id = public.get_my_company_id());

create policy "Users can CRUD their own company's sale items" on public.sale_items
  for all using (company_id = public.get_my_company_id());
  
create policy "Users can CRUD their own company's POs" on public.purchase_orders
  for all using (company_id = public.get_my_company_id());

create policy "Users can CRUD their own company's PO items" on public.purchase_order_items
  for all using (company_id = public.get_my_company_id());
  
create policy "Users can view their own company's inventory ledger" on public.inventory_ledger
  for select using (company_id = public.get_my_company_id());
  
create policy "Users can CRUD their own company's integrations" on public.integrations
  for all using (company_id = public.get_my_company_id());
  
create policy "Users can CRUD their own company's sync state" on public.sync_state
  for all using (integration_id in (select id from public.integrations where company_id = public.get_my_company_id()));

create policy "Users can view their own company's audit log" on public.audit_log
  for select using (company_id = public.get_my_company_id());

create policy "Users can CRUD their own company's channel fees" on public.channel_fees
  for all using (company_id = public.get_my_company_id());
  
create policy "Users can CRUD their own company's export jobs" on public.export_jobs
  for all using (company_id = public.get_my_company_id() and requested_by_user_id = auth.uid());

create policy "Users can view their own company's sync logs" on public.sync_logs
  for select using (integration_id in (select id from public.integrations where company_id = public.get_my_company_id()));

-- Allow service_role to bypass RLS
grant all on all tables in schema public to service_role;

