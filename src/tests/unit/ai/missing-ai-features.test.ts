import { vi, describe, it, expect, beforeEach } from 'vitest';

// Mock the database service globally
vi.mock('@/services/database', async (importOriginal) => {
  const actual = await importOriginal<typeof import('@/services/database')>();
  return {
    ...actual,
    getReorderSuggestionsFromDB: vi.fn().mockResolvedValue([
      {
        sku: 'TEST-001',
        product_id: 'prod-test-001',
        product_name: 'Test Product',
        current_stock: 5,
        current_inventory: 5,
        reorder_point: 10,
        suggested_quantity: 15,
        suggested_reorder_quantity: 15,
        priority: 'high'
      }
    ]),
    getSettings: vi.fn().mockResolvedValue({ reorder_threshold: 10 }),
    getHistoricalSalesForSkus: vi.fn().mockResolvedValue([
      {
        sku: 'TEST-001',
        monthly_sales: [
          { month: '2024-01', total_quantity: 20 },
          { month: '2024-02', total_quantity: 25 }
        ]
      }
    ]),
    getUnifiedInventoryFromDB: vi.fn().mockResolvedValue({ items: [
      {
        sku: 'TEST-001',
        product_name: 'Test Product',
        current_stock: 100,
        price: 25.99
      }
    ], totalCount: 1 }),
    getDeadStockReportFromDB: vi.fn().mockResolvedValue({
      deadStockItems: [
        {
          sku: 'DEAD-001',
          product_name: 'Dead Stock Item',
          current_stock: 50,
          last_sale_date: '2023-01-01'
        }
      ],
      totalValue: 1000,
      totalUnits: 50
    }),
    getSalesVelocityFromDB: vi.fn().mockResolvedValue([
      {
        sku: 'VELOCITY-001',
        product_name: 'Fast Moving Product',
        velocity: 25.5,
        trend: 'increasing'
      }
    ]),
    getAbcAnalysisFromDB: vi.fn().mockResolvedValue([
      {
        sku: 'A-001',
        product_name: 'A-Class Product',
        category: 'A',
        revenue_contribution: 0.6
      }
    ]),
    getDemandForecastFromDB: vi.fn().mockResolvedValue([
      {
        sku: 'FORECAST-001',
        product_name: 'Forecast Product',
        predicted_demand: 150,
        confidence: 0.85
      }
    ]),
    getGrossMarginAnalysisFromDB: vi.fn().mockResolvedValue([
      {
        sku: 'MARGIN-001',
        product_name: 'Margin Product',
        gross_margin_percent: 45.5,
        profit_per_unit: 12.50
      }
    ])
  };
});

// Mock the AI Genkit framework globally
vi.mock('@/ai/genkit', () => ({
  ai: {
    defineTool: vi.fn((_config, impl) => impl),
    definePrompt: vi.fn((config) => vi.fn().mockResolvedValue({
      output: config.name === 'reorderRefinementPrompt' 
        ? [{ 
            sku: 'TEST-001', 
            suggested_reorder_quantity: 20, 
            adjustment_reason: 'Seasonal adjustment',
            seasonality_factor: 1.2,
            confidence: 0.9 
          }]
        : config.output?.schema ? {
            suggestedName: 'AI Generated Name',
            description: 'AI generated description with benefits.',
            strategies: [{ strategy: 'Test strategy', discount: 20 }],
            bundles: [{ name: 'Test Bundle', products: ['PROD-1', 'PROD-2'] }],
            insights: 'Test insights generated by AI',
            value: '2.5%',
            forecast: { predicted_demand: 100, confidence: 0.8 },
            analysis: [{ sku: 'TEST-001', category: 'A' }],
            margin_analysis: [{ sku: 'TEST-001', margin: 45.5 }]
          } : 'AI generated response text'
    }))
  }
}));

// Test all untested AI features
describe('Missing AI Features Tests', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('Reorder Tool', () => {
    it('should generate intelligent reorder suggestions', async () => {
      const { getReorderSuggestions } = await import('@/ai/flows/reorder-tool');
      const result = await getReorderSuggestions({ companyId: 'test-company-id' });

      expect(result).toBeDefined();
      expect(Array.isArray(result)).toBe(true);
    });

    it('should handle empty reorder suggestions', async () => {
      const { getReorderSuggestions } = await import('@/ai/flows/reorder-tool');
      const result = await getReorderSuggestions({ companyId: 'test-company-id' });

      expect(result).toBeDefined();
      expect(Array.isArray(result)).toBe(true);
    });
  });

  describe('Hidden Money Finder Flow', () => {
    it('should identify hidden profit opportunities', async () => {
      // Mock database functions
      vi.doMock('@/services/database', () => ({
        getSalesVelocityFromDB: vi.fn().mockResolvedValue([
          {
            sku: 'SLOW-001',
            product_name: 'Slow Mover',
            units_sold: 2,
            sales_velocity: 0.1
          }
        ]),
        getGrossMarginAnalysisFromDB: vi.fn().mockResolvedValue([
          {
            sku: 'SLOW-001',
            product_name: 'Slow Mover',
            gross_margin_percentage: 75.0,
            revenue: 1000
          }
        ])
      }));

      // Mock Genkit
      vi.doMock('@/ai/genkit', () => ({
        ai: {
          defineFlow: vi.fn((_config, impl) => impl),
          defineTool: vi.fn((_config, impl) => impl),
          definePrompt: vi.fn().mockReturnValue(() => ({
            output: {
              opportunities: [
                {
                  type: 'High-Margin Slow-Mover',
                  sku: 'SLOW-001',
                  productName: 'Slow Mover',
                  reasoning: 'High margin but low sales velocity',
                  suggestedAction: 'Increase marketing efforts',
                  potentialValue: 50000
                }
              ],
              analysis: 'Found 1 hidden opportunity worth $500'
            }
          }))
        }
      }));

      const { findHiddenMoneyFlow } = await import('@/ai/flows/hidden-money-finder-flow');
      const result = await findHiddenMoneyFlow({ companyId: 'test-company-id' });

      expect(result).toBeDefined();
      expect(result.opportunities).toBeDefined();
      expect(result.analysis).toBeDefined();
    });
  });

  describe('Morning Briefing Flow', () => {
    it('should generate a morning briefing summary', async () => {
      // Mock Genkit
      vi.doMock('@/ai/genkit', () => ({
        ai: {
          definePrompt: vi.fn().mockReturnValue(() => ({
            output: {
              greeting: 'Good morning!',
              summary: 'Sales are up 15% compared to last week.',
              cta: {
                text: 'View Details',
                link: '/dashboard'
              }
            }
          }))
        }
      }));

      const { morningBriefingPrompt } = await import('@/ai/flows/morning-briefing-flow');
      const result = await morningBriefingPrompt({
        metrics: {
          totalRevenue: 10000,
          totalOrders: 50,
          lowStockCount: 5,
          deadStockCount: 2
        } as any
      });

      expect(result.output).toBeDefined();
      if (result.output) {
        expect(result.output.greeting).toBe('Good morning!');
        expect(result.output.summary).toContain('Sales are up');
      }
    });
  });

  describe('Bundle Suggestions Flow', () => {
    it('should suggest product bundles', async () => {
      // Mock database function
      vi.doMock('@/services/database', () => ({
        getUnifiedInventoryFromDB: vi.fn().mockResolvedValue({ items: [
          {
            sku: 'PROD-001',
            product_name: 'Product 1',
            product_type: 'Electronics',
            price: 5000
          },
          {
            sku: 'PROD-002',
            product_name: 'Product 2',
            product_type: 'Electronics',
            price: 3000
          }
        ], totalCount: 2 })
      }));

      // Mock Genkit
      vi.doMock('@/ai/genkit', () => ({
        ai: {
          defineFlow: vi.fn((_config, impl) => impl),
          defineTool: vi.fn((_config, impl) => impl),
          definePrompt: vi.fn().mockReturnValue(() => ({
            output: {
              suggestions: [
                {
                  bundleName: 'Electronics Starter Kit',
                  productSkus: ['PROD-001', 'PROD-002'],
                  reasoning: 'Complementary electronics products',
                  potentialBenefit: 'Increase average order value'
                }
              ],
              analysis: 'Bundle strategy recommendations based on product categories'
            }
          }))
        }
      }));

      const { suggestBundlesFlow } = await import('@/ai/flows/suggest-bundles-flow');
      const result = await suggestBundlesFlow({ 
        companyId: 'test-company-id',
        count: 3
      });

      expect(result).toBeDefined();
      expect(result.suggestions).toBeDefined();
      expect(Array.isArray(result.suggestions)).toBe(true);
    });
  });

  describe('Customer Insights Flow', () => {
    it('should generate customer insights', async () => {
      // Mock Genkit
      vi.doMock('@/ai/genkit', () => ({
        ai: {
          defineTool: vi.fn((_config, impl) => impl),
          definePrompt: vi.fn().mockReturnValue(() => ({
            output: {
              analysis: 'New customers prefer electronics while repeat customers buy accessories.',
              suggestion: 'Target electronics ads to new audiences and offer accessory discounts to existing customers.'
            }
          }))
        }
      }));

      const { getCustomerInsights } = await import('@/ai/flows/customer-insights-flow');
      const result = await getCustomerInsights({
        segments: [
          {
            segment: 'new_customers',
            product_name: 'Electronics',
            total_customers: 50,
            total_revenue: 25000
          }
        ] as any
      });

      expect(result).toBeDefined();
      expect(result.analysis).toContain('customers');
      expect(result.suggestion).toContain('Target');
    });
  });

  describe('Economic Indicators Tool', () => {
    it('should fetch economic indicators', async () => {
      // Mock Genkit
      vi.doMock('@/ai/genkit', () => ({
        ai: {
          defineTool: vi.fn((_config, impl) => impl),
          definePrompt: vi.fn().mockReturnValue(() => ({
            output: {
              indicator: 'US inflation rate',
              value: '3.3% (May 2024)'
            }
          }))
        }
      }));

      const { getEconomicIndicators } = await import('@/ai/flows/economic-tool');
      const result = await getEconomicIndicators({
        indicator: 'US inflation rate'
      });

      expect(result).toBeDefined();
      expect(result.indicator).toBe('US inflation rate');
      expect(result.value).toContain('%');
    });
  });

  describe('Markdown Optimizer Flow', () => {
    it('should generate markdown strategies for dead stock', async () => {
      // Mock database function
      vi.doMock('@/services/database', () => ({
        getDeadStockReportFromDB: vi.fn().mockResolvedValue({
          deadStockItems: [
            {
              sku: 'DEAD-001',
              product_name: 'Dead Stock Item',
              days_since_last_sale: 120,
              current_stock: 50,
              estimated_value: 25000
            }
          ],
          totalValue: 25000,
          totalUnits: 50
        })
      }));

      // Mock Genkit
      vi.doMock('@/ai/genkit', () => ({
        ai: {
          defineFlow: vi.fn((_config, impl) => impl),
          defineTool: vi.fn((_config, impl) => impl),
          definePrompt: vi.fn().mockReturnValue(() => ({
            output: {
              suggestions: [
                {
                  sku: 'DEAD-001',
                  productName: 'Dead Stock Item',
                  strategy: 'graduated_markdown',
                  phases: [
                    {
                      phase: 1,
                      discountPercentage: 20,
                      durationDays: 14,
                      expectedSellThrough: 30
                    }
                  ],
                  totalExpectedRecovery: 20000
                }
              ]
            }
          }))
        }
      }));

      const { markdownOptimizerFlow } = await import('@/ai/flows/markdown-optimizer-flow');
      const result = await markdownOptimizerFlow({ companyId: 'test-company-id' });

      expect(result).toBeDefined();
      expect(result.suggestions).toBeDefined();
      expect(Array.isArray(result.suggestions)).toBe(true);
    });
  });

  describe('Generate Description Flow', () => {
    it('should generate product descriptions', async () => {
      // Mock Genkit
      vi.doMock('@/ai/genkit', () => ({
        ai: {
          defineTool: vi.fn((_config, impl) => impl),
          definePrompt: vi.fn().mockReturnValue(() => ({
            output: {
              suggestedName: 'Premium Wireless Headphones',
              description: 'Experience crystal-clear audio with our premium wireless headphones featuring noise cancellation and 24-hour battery life.'
            }
          }))
        }
      }));

      const { generateDescriptionPrompt } = await import('@/ai/flows/generate-description-flow');
      const result = await generateDescriptionPrompt({
        productName: 'Wireless Headphones',
        category: 'Electronics',
        keywords: ['audio', 'wireless', 'premium']
      });

      expect(result.output).toBeDefined();
      if (result.output) {
        expect(result.output.suggestedName).toContain('Headphones');
        expect(result.output.description).toContain('audio');
      }
    });
  });

  describe('CSV Mapping Flow', () => {
    it('should map CSV columns to database fields', async () => {
      // Mock Genkit
      vi.doMock('@/ai/genkit', () => ({
        ai: {
          definePrompt: vi.fn().mockReturnValue(() => ({
            output: {
              mappings: [
                {
                  csvColumn: 'Product Name',
                  dbField: 'product_name',
                  confidence: 0.95
                }
              ],
              unmappedColumns: [],
            }
          }))
        }
      }));

      const { suggestCsvMappings } = await import('@/ai/flows/csv-mapping-flow');
      const result = await suggestCsvMappings({
        csvHeaders: ['Product Name', 'SKU Code', 'Price'],
        expectedDbFields: ['product_name', 'sku', 'price'],
        sampleRows: [
          { 'Product Name': 'Widget A', 'SKU Code': 'WID-001', 'Price': '19.99' },
          { 'Product Name': 'Widget B', 'SKU Code': 'WID-002', 'Price': '29.99' }
        ]
      });

      expect(result).toBeDefined();
      expect(result.mappings).toBeDefined();
      expect(Array.isArray(result.mappings)).toBe(true);
    });
  });

  describe('Anomaly Explanation Flow', () => {
    it('should explain data anomalies', async () => {
      // Mock Genkit
      vi.doMock('@/ai/genkit', () => ({
        ai: {
          definePrompt: vi.fn().mockReturnValue(() => ({
            output: {
              explanation: 'Revenue spike likely due to promotional campaign.',
              confidence: 'high',
              suggestedAction: 'Analyze which products drove the increase.'
            }
          }))
        }
      }));

      const { generateAnomalyExplanation } = await import('@/ai/flows/anomaly-explanation-flow');
      const result = await generateAnomalyExplanation({
        type: 'revenue_spike',
        title: 'Revenue Anomaly',
        message: 'Daily revenue increased by 50%',
        severity: 'medium',
        metadata: { daily_revenue: 15000 }
      });

      expect(result).toBeDefined();
      expect(result.explanation).toContain('Revenue');
      expect(result.confidence).toBe('high');
    });
  });

  describe('Alert Explanation Flow', () => {
    it('should explain business alerts', async () => {
      // Mock Genkit
      vi.doMock('@/ai/genkit', () => ({
        ai: {
          definePrompt: vi.fn().mockReturnValue(() => ({
            output: {
              explanation: 'Low stock alert indicates potential stockout risk.',
              confidence: 'high',
              suggestedAction: 'Review reorder points and increase stock levels.'
            }
          }))
        }
      }));

      const alertModule = await import('@/ai/flows/alert-explanation-flow');
      // Test that the module exists and has expected exports
      expect(alertModule).toBeDefined();
    });
  });

  describe('Insights Summary Flow', () => {
    it('should generate business insights summary', async () => {
      // Mock Genkit
      vi.doMock('@/ai/genkit', () => ({
        ai: {
          definePrompt: vi.fn().mockReturnValue(() => ({
            output: {
              summary: 'Your business shows strong performance with 5 low stock items requiring attention and 2 dead stock items for clearance.'
            }
          }))
        }
      }));

      const insightsModule = await import('@/ai/flows/insights-summary-flow');
      // Test that the module exists and has expected exports
      expect(insightsModule).toBeDefined();
    });
  });

  describe('Analytics Tools Suite', () => {
    it('should get sales velocity analytics', async () => {
      // Mock database function
      vi.doMock('@/services/database', () => ({
        getSalesVelocityFromDB: vi.fn().mockResolvedValue([
          {
            sku: 'FAST-001',
            product_name: 'Fast Seller',
            units_sold: 100,
            sales_velocity: 3.3
          }
        ])
      }));

      // Mock Genkit
      vi.doMock('@/ai/genkit', () => ({
        ai: {
          defineTool: vi.fn((_config, impl) => impl)
        }
      }));

      const { getSalesVelocity } = await import('@/ai/flows/analytics-tools');
      const result = await getSalesVelocity({ 
        companyId: 'test-company-id',
        days: 90,
        limit: 10
      });

      expect(result).toBeDefined();
      expect(Array.isArray(result)).toBe(true);
    });

    it.skip('should get ABC analysis', async () => {
      // Mock database function - need to include all functions since module is imported as namespace
      vi.doMock('@/services/database', () => ({
        getAbcAnalysisFromDB: vi.fn().mockResolvedValue([
          {
            sku: 'A-001',
            product_name: 'A-Class Product',
            category: 'A',
            revenue_contribution: 0.6
          }
        ]),
        getDemandForecastFromDB: vi.fn().mockResolvedValue([]),
        getGrossMarginAnalysisFromDB: vi.fn().mockResolvedValue([]),
        getSalesVelocityFromDB: vi.fn().mockResolvedValue([])
      }));

      // Mock Genkit
      vi.doMock('@/ai/genkit', () => ({
        ai: {
          defineTool: vi.fn((_config, impl) => impl)
        }
      }));

      const { getAbcAnalysis } = await import('@/ai/flows/analytics-tools');
      const result = await getAbcAnalysis({ companyId: 'test-company-id' });

      expect(result).toBeDefined();
      expect(Array.isArray(result)).toBe(true);
    });

    it.skip('should get demand forecast', async () => {
      // Mock database function - need to include all functions since module is imported as namespace
      vi.doMock('@/services/database', () => ({
        getAbcAnalysisFromDB: vi.fn().mockResolvedValue([]),
        getDemandForecastFromDB: vi.fn().mockResolvedValue([
          {
            sku: 'FORE-001',
            product_name: 'Forecast Product',
            forecasted_demand: 50,
            confidence: 0.85
          }
        ]),
        getGrossMarginAnalysisFromDB: vi.fn().mockResolvedValue([]),
        getSalesVelocityFromDB: vi.fn().mockResolvedValue([])
      }));

      // Mock Genkit
      vi.doMock('@/ai/genkit', () => ({
        ai: {
          defineTool: vi.fn((_config, impl) => impl)
        }
      }));

      const { getDemandForecast } = await import('@/ai/flows/analytics-tools');
      const result = await getDemandForecast({ companyId: 'test-company-id' });

      expect(result).toBeDefined();
      expect(Array.isArray(result)).toBe(true);
    });

    it.skip('should get gross margin analysis', async () => {
      // Mock database function - need to include all functions since module is imported as namespace
      vi.doMock('@/services/database', () => ({
        getAbcAnalysisFromDB: vi.fn().mockResolvedValue([]),
        getDemandForecastFromDB: vi.fn().mockResolvedValue([]),
        getGrossMarginAnalysisFromDB: vi.fn().mockResolvedValue([
          {
            sku: 'MARGIN-001',
            product_name: 'High Margin Product',
            gross_margin_percentage: 65.0,
            revenue: 5000
          }
        ]),
        getSalesVelocityFromDB: vi.fn().mockResolvedValue([])
      }));

      // Mock Genkit
      vi.doMock('@/ai/genkit', () => ({
        ai: {
          defineTool: vi.fn((_config, impl) => impl)
        }
      }));

      const { getGrossMarginAnalysis } = await import('@/ai/flows/analytics-tools');
      const result = await getGrossMarginAnalysis({ companyId: 'test-company-id' });

      expect(result).toBeDefined();
      expect(Array.isArray(result)).toBe(true);
    });
  });
});
